[Setup Environment]

"C:\Program Files (x86)\IntelSWTools\openvino\bin\setupvars.bat"
cd "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\model_optimizer\install_prerequisites\"
install_prerequisites.bat
pip install -r "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\requirements.in"
pip install torch==1.3.1+cpu torchvision==0.4.2+cpu -f https://download.pytorch.org/whl/torch_stable.html

[Build]
python "C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\downloader.py" --cache_dir "C:\Users\Public\openvino_models" -o "C:\Users\Public\openvino_models" --name mobilenet-v2-1.0-224

[Optimize]
python "C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\converter.py" -d "C:\Users\Public\openvino_models" -o "C:\Users\Public\openvino_models" --name mobilenet-v2-1.0-224

[Deploy]
cd "C:\Users\Public\openvino_models\public\mobilenet-v2-1.0-224\FP16\"
copy "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\demo\car.png" .\
python


[Infer on CPU]
import cv2
import numpy as np
from openvino.inference_engine import IENetwork, IECore
ie = IECore()
net = IENetwork(model='mobilenet-v2-1.0-224.xml', weights='mobilenet-v2-1.0-224.bin')
input_blob = next(iter(net.inputs))
out_blob = next(iter(net.outputs))
batch,channel,height,width  = net.inputs[input_blob].shape
image = cv2.imread('car.png')
cv2.imshow("input", image)
image = cv2.resize(image, (width, height))
image = image.transpose((2, 0, 1))  # Change data layout from HWC to CHW
exec_net = ie.load_network(network=net, device_name='CPU')
res = exec_net.infer(inputs={input_blob: image})
idx = np.argsort(res[out_blob][0])[::-1]
for i in range(5):
    print(idx[i]+1, res[out_blob][0][idx[i]])

cv2.waitKey(3*1000)


[Infer on GPU]
import cv2
import numpy as np
from openvino.inference_engine import IENetwork, IECore
ie = IECore()
net = IENetwork(model='mobilenet-v2-1.0-224.xml', weights='mobilenet-v2-1.0-224.bin')
input_blob = next(iter(net.inputs))
out_blob = next(iter(net.outputs))
batch,channel,height,width  = net.inputs[input_blob].shape
image = cv2.imread('car.png')
cv2.imshow("input", image)
image = cv2.resize(image, (width, height))
image = image.transpose((2, 0, 1))  # Change data layout from HWC to CHW
exec_net = ie.load_network(network=net, device_name='GPU')
res = exec_net.infer(inputs={input_blob: image})
idx = np.argsort(res[out_blob][0])[::-1]
for i in range(5):
    print(idx[i]+1, res[out_blob][0][idx[i]])

cv2.waitKey(3*1000)

[Infer on VPU/NCS2]
import cv2
import numpy as np
from openvino.inference_engine import IENetwork, IECore
ie = IECore()
net = IENetwork(model='mobilenet-v2-1.0-224.xml', weights='mobilenet-v2-1.0-224.bin')
input_blob = next(iter(net.inputs))
out_blob = next(iter(net.outputs))
batch,channel,height,width  = net.inputs[input_blob].shape
image = cv2.imread('car.png')
cv2.imshow("input", image)
image = cv2.resize(image, (width, height))
image = image.transpose((2, 0, 1))  # Change data layout from HWC to CHW
exec_net = ie.load_network(network=net, device_name='MYRIAD')
res = exec_net.infer(inputs={input_blob: image})
idx = np.argsort(res[out_blob][0])[::-1]
for i in range(5):
    print(idx[i]+1, res[out_blob][0][idx[i]])

cv2.waitKey(3*1000)

[Infer on Multi-device (CPU and GPU)]
import cv2
import numpy as np
from openvino.inference_engine import IENetwork, IECore
ie = IECore()
net = IENetwork(model='mobilenet-v2-1.0-224.xml', weights='mobilenet-v2-1.0-224.bin')
input_blob = next(iter(net.inputs))
out_blob = next(iter(net.outputs))
batch,channel,height,width  = net.inputs[input_blob].shape
image = cv2.imread('car.png')
cv2.imshow("input", image)
image = cv2.resize(image, (width, height))
image = image.transpose((2, 0, 1))  # Change data layout from HWC to CHW
exec_net = ie.load_network(network=net, device_name='MULTI:GPU,CPU')
res = exec_net.infer(inputs={input_blob: image})
idx = np.argsort(res[out_blob][0])[::-1]
for i in range(5):
    print(idx[i]+1, res[out_blob][0][idx[i]])

cv2.waitKey(3*1000)

[benchmark_app.py]
"c:\Program Files (x86)\IntelSWTools\openvino\bin\setupvars.bat "
cd "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\benchmark_tool"
python "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\benchmark_tool\benchmark_app.py" -m "C:\Users\Public\openvino_models\public\mobilenet-ssd/FP16/mobilenet-ssd.xml" -d CPU

python "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\benchmark_tool\benchmark_app.py" -m "C:\Users\Public\openvino_models\public\mobilenet-ssd/FP16/mobilenet-ssd.xml" -d GPU

python "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\benchmark_tool\benchmark_app.py" -m "C:\Users\Public\openvino_models\public\mobilenet-ssd/FP16/mobilenet-ssd.xml" -d MYRIAD

[Object Detection Demo with webcam]
"c:\Program Files (x86)\IntelSWTools\openvino\bin\setupvars.bat"
python "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\downloader.py" --list "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\ deployment_tools\inference_engine\demos\python_demos\object_detection_demo_ssd_async\models.lst" --cache_dir C:\Users\Public\openvino_models -o C:\Users\Public\openvino_models

(for quick start)
python "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\downloader.py" --name person-detection-retail-0013,face-detection-adas-0001 --cache_dir C:\Users\Public\openvino_models -o C:\Users\Public\openvino_models

cd "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\inference_engine\demos\python_demos\object_detection_demo_ssd_async"
python object_detection_demo_ssd_async.py -m "C:\Users\Public\openvino_models\intel\person-detection-retail-0013\FP16\person-detection-retail-0013.xml" -i cam
python object_detection_demo_ssd_async.py -m "C:\Users\Public\openvino_models\intel\face-detection-adas-0001\FP16\face-detection-adas-0001.xml" -i cam


[Instance Segmentation Demo with webcam]
"c:\Program Files (x86)\IntelSWTools\openvino\bin\setupvars.bat"
python "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\downloader.py" --list "c:\Program Files (x86)\IntelSWTools\openvino\inference_engine\demos\python_demos\instance_segmentation_demo\models.lst" --cache_dir C:\Users\Public\openvino_models -o C:\Users\Public\openvino_models
cd "c:\Program Files (x86)\IntelSWTools\openvino\inference_engine\demos\python_demos\instance_segmentation_demo"
python instance_segmentation_demo.py -m "C:\Users\Public\openvino_models\intel\instance-segmentation-security-0050\FP16\instance-segmentation-security-0050.xml" --labels coco_labels.txt -i 0


[Single Human Pose Estimation Demo with webcam]
"c:\Program Files (x86)\IntelSWTools\openvino\bin\setupvars.bat"
python "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\downloader.py" --name single-human-pose-estimation-0001 --cache_dir C:\Users\Public\openvino_models -o C:\Users\Public\openvino_models 
python "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\converter.py" --name single-human-pose-estimation-0001 -d C:\Users\Public\openvino_models -o C:\Users\Public\openvino_models
python "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\downloader.py" --name mobilenet-ssd --cache_dir C:\Users\Public\openvino_models -o C:\Users\Public\openvino_models
python "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\converter.py" --name mobilenet-ssd -d C:\Users\Public\openvino_models -o C:\Users\Public\openvino_models
cd "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\inference_engine\demos\python_demos\single_human_pose_estimation_demo
python single_human_pose_estimation_demo.py -m_od "C:\Users\Public\openvino_models\public\mobilenet-ssd\FP16\mobilenet-ssd.xml" -m_hpe  "C:\Users\Public\openvino_models\public\single-human-pose-estimation-0001\FP16\single-human-pose-estimation-0001.xml" -i 0


[Face Recognition Demo with webcam on different device]
"c:\Program Files (x86)\IntelSWTools\openvino\bin\setupvars.bat"
mkdir c:\Users\Public\face_gallery
python "C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\downloader.py" --cache_dir "C:\Users\Public\openvino_models" -o "C:\Users\Public\openvino_models" --name face-detection-retail-0004
python "C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\downloader.py" --cache_dir "C:\Users\Public\openvino_models" -o "C:\Users\Public\openvino_models" --name landmarks-regression-retail-0009
python "C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\downloader.py" --cache_dir "C:\Users\Public\openvino_models" -o "C:\Users\Public\openvino_models" --name  face-reidentification-retail-0095
python “c:\Program Files (x86)\IntelSWTools\openvino\inference_engine\demos\python_demos\face_recognition_demo\face_recognition_demo.py” -m_fd c:\Users\Public\openvino_models\intel\face-detection-retail-0004\FP16\face-detection-retail-0004.xml -m_lm c:\Users\Public\openvino_models\intel\landmarks-regression-retail-0009\FP16\landmarks-regression-retail-0009.xml -m_reid c:\Users\Public\openvino_models\intel\face-reidentification-retail-0095\FP16\face-reidentification-retail-0095.xml –d_fd CPU –d_lm GPU –d_reid GPU -fg c:\Users\Public\face_gallery -i 0



[build C++ sample and demo code]
"C:\Program Files (x86)\IntelSWTools\openvino_2020.3.194\deployment_tools\inference_engine\samples\cpp\build_samples_msvc.bat" VS2019

"C:\Program Files (x86)\IntelSWTools\openvino_2020.3.194\deployment_tools\open_model_zoo\demos\build_demos_msvc.bat" VS2019

Following example requires visual studio 2017/2019 installed and use command prompt to run "build_demos_msvc.bat VS2019" in folder C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\inference_engine\demos


[C++ sample - Human Pose]
"c:\Program Files (x86)\IntelSWTools\openvino\bin\setupvars.bat"
python  "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\downloader.py" --list "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\open_model_zoo\demos\human_pose_estimation_demo\models.lst" --cache_dir "C:\Users\Public\openvino_models" -o "C:\Users\Public\openvino_models"
human_pose_estimation_demo.exe -m "C:\Users\Public\openvino_models\intel\human-pose-estimation-0001\FP16\human-pose-estimation-0001.xml"


[C++ sample - Interactive Face Detection]
"c:\Program Files (x86)\IntelSWTools\openvino\bin\setupvars.bat"
python  "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\tools\model_downloader\downloader.py" --list "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\open_model_zoo\demos\interactive_face_detection_demo\models.lst" --cache_dir "C:\Users\Public\openvino_models" -o "C:\Users\Public\openvino_models"
interactive_face_detection_demo.exe -m C:\Users\Public\openvino_models\intel\face-detection-retail-0004\FP16\face-detection-retail-0004.xml -m_ag C:\Users\Public\openvino_models\intel\age-gender-recognition-retail-0013\FP16\age-gender-recognition-retail-0013.xml -m_em C:\Users\Public\openvino_models\intel\emotions-recognition-retail-0003\FP16\emotions-recognition-retail-0003.xml -m_lm C:\Users\Public\openvino_models\intel\facial-landmarks-35-adas-0002\FP16\facial-landmarks-35-adas-0002.xml -m_hp C:\Users\Public\openvino_models\intel\head-pose-estimation-adas-0001\FP16\head-pose-estimation-adas-0001.xml -i cam



